``0-add_integer`` module
======================

Importing the module

::

    >>> add_integer = __import__('0-add_integer').add_integer


Using ``add_integer``
-------------------

Integers
=======
``add_integer(a, b=98)`` returns the addition of its 2 integer arguments (must be integers or floats).

::

    >>> add_integer(1, 2)
    3
    >>> print(add_integer(100, -2))
    98

If there's only 1 argument, it should add it with 98 because b has a default value of 98.

::

    >>> print(add_integer(2))
    100

Floats
=======
As we stated before ``add_integer(a, b)`` works with both integers or floats, but there's a catch.
If an argument is a float, we must cast it to integer first then we add the 2 arguments, so the result
is always an integer.

::

    >>> print(add_integer(100.3, -2))
    98

Non-Numbers
===========
``add_integer(a, b)`` doesn't work if one of the arguments is a string, a list, or a tuple.

::

    >>> print(add_integer(4, "School"))
    Traceback (most recent call last):
    TypeError: b must be an integer

    >>> print(add_integer(None))
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> print(add_integer((1, 2, 4), 5))
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> print(add_integer("School"))
    Traceback (most recent call last):
    TypeError: a must be an integer
